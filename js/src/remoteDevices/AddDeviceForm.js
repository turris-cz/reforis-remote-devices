/*
 * Copyright (C) 2019 CZ.NIC z.s.p.o. (http://www.nic.cz/)
 *
 * This is free software, licensed under the GNU General Public License v3.
 * See /LICENSE for more information.
 */

import React, { useEffect } from "react";

import {
    useAPIPost,
    API_STATE,
    useForm,
    useAlert,
    FileInput,
    Button,
    formFieldsSize,
} from "foris";

import API_URLs from "API";

export default function AddDeviceForm() {
    const [setAlert] = useAlert();

    const [postDeviceResponse, postDevice] = useAPIPost(
        API_URLs.devices,
        "multipart/form-data"
    );
    useEffect(() => {
        if (postDeviceResponse.state === API_STATE.ERROR) {
            setAlert(postDeviceResponse.data);
        }
    }, [postDeviceResponse, setAlert]);
    const isSending = postDeviceResponse.state === API_STATE.SENDING;

    const [formState, formChangeHandler, reloadForm] = useForm(validator);
    const formData = formState.data;
    const formErrors = formState.errors || {};
    useEffect(() => {
        reloadForm({ token: undefined });
    }, [reloadForm]);

    function handleSubmit(event) {
        event.preventDefault();
        const postData = new FormData();
        postData.append("token", formData.token);
        postDevice({ data: postData });
    }

    if (!formData) {
        return null;
    }

    return (
        <div className={formFieldsSize}>
            <h2>{_("Add Device")}</h2>
            <p>
                {_(
                    "Upload token file generated by device you want to control remotely."
                )}
            </p>
            <form onSubmit={handleSubmit} className="position-relative">
                <FileInput
                    label={
                        formData.token ? formData.token.name : _("Token file")
                    }
                    files={[formData.token]}
                    error={formErrors.token}
                    onChange={formChangeHandler((value) => ({
                        token: { $set: value },
                    }))}
                    accept=".tar.gz,.tgz"
                />
                <div className="text-right">
                    <Button
                        type="submit"
                        forisFormSize
                        disabled={
                            formErrors.token || !formData.token || isSending
                        }
                        loading={isSending}
                    >
                        {_("Upload token")}
                    </Button>
                </div>
            </form>
        </div>
    );
}

function validator(formData) {
    // Ignore empty file - submit will be disabled anyways
    if (!formData.token) {
        return undefined;
    }

    if (formData.token.size > 1024 * 1024) {
        return { token: _("File is too big. Maximum size is 1 MB.") };
    }

    const filename = formData.token.name;
    if (filename.length === 0 || filename.length > 50) {
        return {
            token: _(
                "Filename must be at least 1 and at most 50 characters long."
            ),
        };
    }
    if (!/^[a-zA-Z0-9_.-]*$/.test(filename)) {
        return {
            token: _(
                "Filename can contain only alphanumeric characters, dots, dashes and underscores."
            ),
        };
    }

    return undefined;
}
